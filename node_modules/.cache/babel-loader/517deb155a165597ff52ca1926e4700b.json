{"ast":null,"code":"var _jsxFileName = \"D:\\\\KavtechHRM\\\\frontend\\\\src\\\\Components\\\\accountBox\\\\accountContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useHistory } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountContext = /*#__PURE__*/createContext();\nexport default AccountContext;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  e.preventDefault();\n\n  let loginUser = async e => {\n    let response = fetch('http://127.0.0.1:8000/Kavtech/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'email': null,\n        'password': null\n      })\n    });\n\n    if (response.status === 200) {\n      setAuthTokens(values);\n      setUser(values.access);\n    } else {\n      alert(\"Something Went Wrong!!!\");\n    }\n  }; //Authentication\n\n\n  let [authTokens, setAuthTokens] = useState(null);\n  let [user, setUser] = useState(null); // let [ authTokens, setAuthTokens] = useState(localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n  // let [user, setUser] = useState(localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) :  null)\n\n  const history = useHistory();\n  let contextData = {\n    user: user,\n    loginUser: loginUser\n  }; // localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n  //Authentication\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      'name': 'Dennis'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"ZOUJ5aSgUJD21j++ySEWp18QHc8=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/KavtechHRM/frontend/src/Components/accountBox/accountContext.js"],"names":["createContext","useState","useHistory","AccountContext","AuthProvider","children","e","preventDefault","loginUser","response","fetch","method","headers","body","JSON","stringify","status","setAuthTokens","values","setUser","access","alert","authTokens","user","history","contextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAmD,OAAnD;;AAEA,OAAO,MAAMC,cAAc,gBAAGH,aAAa,EAApC;AAEP,eAAeG,cAAf;AAGA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACxCC,EAAAA,CAAC,CAACC,cAAF;;AACA,MAAIC,SAAS,GAAG,MAAOF,CAAP,IAAa;AACzB,QAAIG,QAAQ,GAAGC,KAAK,CAAE,sCAAF,EAA0C;AAC1DC,MAAAA,MAAM,EAAE,MADkD;AAE1DC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFiD;AAK1DC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAAC,iBAAQ,IAAT;AAAe,oBAAW;AAA1B,OAAf;AALqD,KAA1C,CAApB;;AAOA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA4B;AACxBC,MAAAA,aAAa,CAACC,MAAD,CAAb;AACAC,MAAAA,OAAO,CAACD,MAAM,CAACE,MAAR,CAAP;AAED,KAJH,MAIO;AACHC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AAED;AACN,GAhBD,CAFwC,CAmB1C;;;AACA,MAAI,CAAEC,UAAF,EAAcL,aAAd,IAA+BhB,QAAQ,CAAC,IAAD,CAA3C;AACA,MAAI,CAACsB,IAAD,EAAOJ,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAA9B,CArB0C,CAsB1C;AACA;;AACA,QAAMuB,OAAO,GAAGtB,UAAU,EAA1B;AACA,MAAIuB,WAAW,GAAG;AAChBF,IAAAA,IAAI,EAACA,IADW;AAEhBf,IAAAA,SAAS,EAACA;AAFM,GAAlB,CAzB0C,CA6B5C;AAEE;;AAGE,sBACI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAC,cAAS;AAAV,KAAhC;AAAA,cACKH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvCM;;GAAMD,Y;UAwBKF,U;;;KAxBLE,Y","sourcesContent":["import { createContext, useState, useHistory} from \"react\";\n\nexport const AccountContext = createContext();\n\nexport default AccountContext\n\n\nexport const AuthProvider = ({children}) => {\n    e.preventDefault()\n    let loginUser = async (e) => {\n        let response = fetch ('http://127.0.0.1:8000/Kavtech/login/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body:JSON.stringify({'email':null, 'password':null})\n        })\n        if (response.status === 200){\n            setAuthTokens(values)\n            setUser(values.access)\n    \n          }else{\n            alert(\"Something Went Wrong!!!\")\n    \n          }\n    }\n  //Authentication\n  let [ authTokens, setAuthTokens] = useState(null)\n  let [user, setUser] = useState(null)\n  // let [ authTokens, setAuthTokens] = useState(localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n  // let [user, setUser] = useState(localStorage.getItem('authTokens') ? jwt_decode(localStorage.getItem('authTokens')) :  null)\n  const history = useHistory();\n  let contextData = {\n    user:user,\n    loginUser:loginUser\n}\n// localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n\n  //Authentication\n\n   \n    return(\n        <AccountContext.Provider value={{'name' : 'Dennis'}}>\n            {children}\n        </AccountContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}