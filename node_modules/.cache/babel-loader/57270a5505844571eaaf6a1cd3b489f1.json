{"ast":null,"code":"var _jsxFileName = \"D:\\\\KavtechHRM\\\\frontend\\\\src\\\\Components\\\\accountBox\\\\accountContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useHistory } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AccountContext = /*#__PURE__*/createContext();\nexport default AccountContext;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  let loginUser = async e => {\n    // e.preventDefault()\n    let response = await fetch('http://127.0.0.1:8000/Kavtech/login/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'email': e.target.email.value,\n        'password': e.target.password.value\n      })\n    });\n    let data = await response.json();\n    console.log('data:', data); // if (response.status === 200){\n    //     setAuthTokens(values)\n    //     setUser(values.access)\n    //   }else{\n    //     alert(\"Something Went Wrong!!!\")\n    //   }\n  }; //Authentication\n\n\n  let [user, setUser] = useState(null);\n  let contextData = {\n    user: user,\n    loginUser: loginUser\n  }; // localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n  //Authentication\n\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      'name': 'Dennis'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/KavtechHRM/frontend/src/Components/accountBox/accountContext.js"],"names":["createContext","useState","useHistory","AccountContext","AuthProvider","children","loginUser","e","response","fetch","method","headers","body","JSON","stringify","target","email","value","password","data","json","console","log","user","setUser","contextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAmD,OAAnD;;AAEA,OAAO,MAAMC,cAAc,gBAAGH,aAAa,EAApC;AAEP,eAAeG,cAAf;AAGA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAExC,MAAIC,SAAS,GAAG,MAAOC,CAAP,IAAa;AACzB;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAF,EAA0C;AAChEC,MAAAA,MAAM,EAAE,MADwD;AAEhEC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFuD;AAKhEC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAAC,iBAAQP,CAAC,CAACQ,MAAF,CAASC,KAAT,CAAeC,KAAxB;AAA+B,oBAAWV,CAAC,CAACQ,MAAF,CAASG,QAAT,CAAkBD;AAA5D,OAAf;AAL2D,KAA1C,CAA1B;AAOA,QAAIE,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB,EAVyB,CAWzB;AACA;AACA;AAEA;AACA;AAEA;AACH,GAnBD,CAFwC,CAsB1C;;;AACA,MAAI,CAACI,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,IAAD,CAA9B;AAEA,MAAIwB,WAAW,GAAG;AAChBF,IAAAA,IAAI,EAACA,IADW;AAEhBjB,IAAAA,SAAS,EAACA;AAFM,GAAlB,CAzB0C,CA6B5C;AAEE;;AAGE,sBACI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAC,cAAS;AAAV,KAAhC;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useHistory} from \"react\";\n\nexport const AccountContext = createContext();\n\nexport default AccountContext\n\n\nexport const AuthProvider = ({children}) => {\n    \n    let loginUser = async (e) => {\n        // e.preventDefault()\n        let response = await fetch ('http://127.0.0.1:8000/Kavtech/login/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body:JSON.stringify({'email':e.target.email.value, 'password':e.target.password.value})\n        })\n        let data = await response.json()\n        console.log('data:', data)\n        // if (response.status === 200){\n        //     setAuthTokens(values)\n        //     setUser(values.access)\n     \n        //   }else{\n        //     alert(\"Something Went Wrong!!!\")\n    \n        //   }\n    }\n  //Authentication\n  let [user, setUser] = useState(null)\n\n  let contextData = {\n    user:user,\n    loginUser:loginUser\n}\n// localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) :  null)\n\n  //Authentication\n\n   \n    return(\n        <AccountContext.Provider value={{'name' : 'Dennis'}}>\n            {children}\n        </AccountContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}