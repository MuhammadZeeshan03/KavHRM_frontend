{"ast":null,"code":"import { __extends, __rest, __read, __assign } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation } from '../../../animation/utils/transitions.js';\nimport { tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\nvar progressTarget = 1000;\n\nvar Animate =\n/** @class */\nfunction (_super) {\n  __extends(Animate, _super);\n\n  function Animate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * A mutable object that tracks the target viewport box\n     * for the current animation frame.\n     */\n\n\n    _this.frameTarget = axisBox();\n    /**\n     * The current animation target, we use this to check whether to start\n     * a new animation or continue the existing one.\n     */\n\n    _this.currentAnimationTarget = axisBox();\n    /**\n     * Track whether we're animating this axis.\n     */\n\n    _this.isAnimating = {\n      x: false,\n      y: false\n    };\n    _this.stopAxisAnimation = {\n      x: undefined,\n      y: undefined\n    };\n    _this.isAnimatingTree = false;\n\n    _this.animate = function (target, origin, _a) {\n      if (_a === void 0) {\n        _a = {};\n      }\n\n      var originBox = _a.originBox,\n          targetBox = _a.targetBox,\n          visibilityAction = _a.visibilityAction,\n          shouldStackAnimate = _a.shouldStackAnimate,\n          onComplete = _a.onComplete,\n          config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\"]);\n\n      var _b = _this.props,\n          visualElement = _b.visualElement,\n          layout = _b.layout;\n      /**\n       * Early return if we've been instructed not to animate this render.\n       */\n\n      if (shouldStackAnimate === false) {\n        _this.isAnimatingTree = false;\n        return _this.safeToRemove();\n      }\n      /**\n       * Prioritise tree animations\n       */\n\n\n      if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n        return;\n      } else if (shouldStackAnimate) {\n        _this.isAnimatingTree = true;\n      }\n      /**\n       * Allow the measured origin (prev bounding box) and target (actual layout) to be\n       * overridden by the provided config.\n       */\n\n\n      origin = originBox || origin;\n      target = targetBox || target;\n      var boxHasMoved = hasMoved(origin, target);\n      var animations = eachAxis(function (axis) {\n        /**\n         * If layout is set to \"position\", we can resize the origin box based on the target\n         * box and only animate its position.\n         */\n        if (layout === \"position\") {\n          var targetLength = target[axis].max - target[axis].min;\n          origin[axis].max = origin[axis].min + targetLength;\n        }\n\n        if (visualElement.projection.isTargetLocked) {\n          return;\n        } else if (visibilityAction !== undefined) {\n          visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n        } else if (boxHasMoved) {\n          // If the box has moved, animate between it's current visual state and its\n          // final state\n          return _this.animateAxis(axis, target[axis], origin[axis], config);\n        } else {\n          // If the box has remained in the same place, immediately set the axis target\n          // to the final desired state\n          return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max);\n        }\n      }); // Force a render to ensure there's no flash of uncorrected bounding box.\n\n      visualElement.syncRender();\n      /**\n       * If this visualElement isn't present (ie it's been removed from the tree by the user but\n       * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n       * have successfully finished.\n       */\n\n      return Promise.all(animations).then(function () {\n        _this.isAnimatingTree = false;\n        onComplete && onComplete();\n        visualElement.notifyLayoutAnimationComplete();\n      });\n    };\n\n    return _this;\n  }\n\n  Animate.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var visualElement = this.props.visualElement;\n    visualElement.animateMotionValue = startAnimation;\n    visualElement.enableLayoutProjection();\n    this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n\n    visualElement.layoutSafeToRemove = function () {\n      return _this.safeToRemove();\n    };\n\n    addScaleCorrection(defaultScaleCorrectors);\n  };\n\n  Animate.prototype.componentWillUnmount = function () {\n    var _this = this;\n\n    this.unsubLayoutReady();\n    eachAxis(function (axis) {\n      var _a, _b;\n\n      return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n  /**\n   * TODO: This manually performs animations on the visualElement's layout progress\n   * values. It'd be preferable to amend the startLayoutAxisAnimation\n   * API to accept more custom animations like this.\n   */\n\n\n  Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n    var _this = this;\n\n    var _b, _c;\n\n    var _d = _a === void 0 ? {} : _a,\n        transition = _d.transition;\n    /**\n     * If we're not animating to a new target, don't run this animation\n     */\n\n\n    if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {\n      return;\n    }\n\n    (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n    this.isAnimating[axis] = true;\n    var visualElement = this.props.visualElement;\n    var frameTarget = this.frameTarget[axis];\n    var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n    /**\n     * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n     * be re-incoporated into a subsequent spring animation.\n     */\n\n    layoutProgress.clearListeners();\n    layoutProgress.set(0);\n    layoutProgress.set(0);\n    /**\n     * Create an animation function to run once per frame. This will tween the visual bounding box from\n     * origin to target using the latest progress value.\n     */\n\n    var frame = function () {\n      // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n      var p = layoutProgress.get() / progressTarget; // Tween the axis and update the visualElement with the latest values\n\n      tweenAxis(frameTarget, origin, target, p);\n      visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max);\n    }; // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n\n\n    frame(); // Ensure that the layout delta is updated for this frame.\n\n    visualElement.updateLayoutProjection(); // Create a function to stop animation on this specific axis\n\n    var unsubscribeProgress = layoutProgress.onChange(frame);\n\n    this.stopAxisAnimation[axis] = function () {\n      _this.isAnimating[axis] = false;\n      layoutProgress.stop();\n      unsubscribeProgress();\n    };\n\n    this.currentAnimationTarget[axis] = target; // Start the animation on this axis\n\n    var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, transition || this.props.transition || defaultTransition).then(this.stopAxisAnimation[axis]);\n    return animation;\n  };\n\n  Animate.prototype.safeToRemove = function () {\n    var _a, _b;\n\n    (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  Animate.prototype.render = function () {\n    return null;\n  };\n\n  return Animate;\n}(React.Component);\n\nfunction AnimateLayoutContextProvider(props) {\n  var _a = __read(usePresence(), 2),\n      safeToRemove = _a[1];\n\n  return React.createElement(Animate, __assign({}, props, {\n    safeToRemove: safeToRemove\n  }));\n}\n\nfunction hasMoved(a, b) {\n  return !isZeroBox(a) && !isZeroBox(b) && (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y));\n}\n\nvar zeroAxis = {\n  min: 0,\n  max: 0\n};\n\nfunction isZeroBox(a) {\n  return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\n\nfunction axisIsEqual(a, b) {\n  return a.min === b.min && a.max === b.max;\n}\n\nvar defaultTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nexport { AnimateLayoutContextProvider };","map":{"version":3,"names":["__extends","__rest","__read","__assign","React","eachAxis","startAnimation","tweenAxis","VisibilityAction","usePresence","axisBox","addScaleCorrection","defaultScaleCorrectors","progressTarget","Animate","_super","_this","apply","arguments","frameTarget","currentAnimationTarget","isAnimating","x","y","stopAxisAnimation","undefined","isAnimatingTree","animate","target","origin","_a","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","config","_b","props","visualElement","layout","safeToRemove","boxHasMoved","hasMoved","animations","axis","targetLength","max","min","projection","isTargetLocked","setVisibility","Show","animateAxis","setProjectionTargetAxis","syncRender","Promise","all","then","notifyLayoutAnimationComplete","prototype","componentDidMount","animateMotionValue","enableLayoutProjection","unsubLayoutReady","onLayoutUpdate","layoutSafeToRemove","componentWillUnmount","call","_c","_d","transition","axisIsEqual","layoutProgress","getProjectionAnimationProgress","clearListeners","set","frame","p","get","updateLayoutProjection","unsubscribeProgress","onChange","stop","animation","defaultTransition","render","Component","AnimateLayoutContextProvider","createElement","a","b","isZeroBox","zeroAxis","duration","ease"],"sources":["D:/SkillSquads React+Django/frontend/node_modules/framer-motion/dist/es/motion/features/layout/Animate.js"],"sourcesContent":["import { __extends, __rest, __read, __assign } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation } from '../../../animation/utils/transitions.js';\nimport { tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], config);\n                }\n                else {\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Ensure that the layout delta is updated for this frame.\n        visualElement.updateLayoutProjection();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, transition || this.props.transition || defaultTransition).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\n\nexport { AnimateLayoutContextProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}